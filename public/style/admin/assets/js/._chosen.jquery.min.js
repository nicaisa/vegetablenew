FOAFCB0RlZmF1bHRKFQoHQ29udHJvbBAAIKqJygFAqonKAUoVCgdFbmFibGVkEAAgq4nKAUCricoBSjgKDkVuYWJsZWRfZm9yY2VkEAAgrInKASoaZW5hYmxlLW1hdGVyaWFsLWRlc2lnbi1udHBArInKAUoLCgdEZWZhdWx0EGRSEhIEMzguKiAAIAEoACgBKAMoAmABElsKH01lZGlhU3RyZWFtQXVkaW9UcmFja1Byb2Nlc3NpbmcYxPPHnQU4AUIHRW5hYmxlZEoMCghEaXNhYmxlZBAASgsKB0VuYWJsZWQQZFIMIAAoACgBKAMoAigEEpICChhNb3N0VmlzaXRlZFRpbGVQbGFjZW1lbnQYgP6ikgU4AUIHRGVmYXVsdEoWChJPbmVFaWdodF9BX0ZsaXBwZWQQA0oOCgpPbmVFaWdodF9CEANKFgoST25lRWlnaHRfQ19GbGlwcGVkEANKDgoKT25lRWlnaHRfRBADShUKEU9uZUZvdXJfQV9GbGlwcGVkEANKDQoJT25lRm91cl9CEANKFQoRT25lRm91cl9DX0ZsaXBwZWQQA0oNCglPbmVGb3VyX0QQA0oLCgdDb250cm9sEANKFAoQRG9udFNob3dPcGVuVGFicxADSgsKB0RlZmF1bHQQRlIZEgsyOC4wLjE0OTYuMCABIAAoACgBKAIoAxKSAQoUTW91c2VFdmVudFByZWNvbm5lY3QYxLSNlgU4AEIIRGlzYWJsZWRKDQoJTW91c2VEb3duEB5KDQoJTW91c2VPdmVyEABKEgoOVGFwVW5jb25maXJtZWQQAEoLCgdUYXBEb3duEABKCwoHQ29udHJvbBAeSgwKCERpc2FibGVkEChSDhIEMjkuKiACKAAoASgCEpgBChRNb3VzZUV2ZW50UHJlY29ubmVjdBjEtI2WBTgAQghEaXNhYmxlZEoNCglNb3VzZURvd24QCkoNCglNb3VzZU92ZXIQAEoSCg5UYXBVbmNvbmZpcm1lZBAASgsKB1RhcERvd24QAEoLCgdDb250cm9sEApKDAoIRGlzYWJsZWQQUFIUEgQyOS4qIAAgASgAKAEoAigDKAQS8wMKFE5ld1Byb2ZpbGVNYW5hZ2VtZW50GMSCl7QFOAFCDU9sZEF2YXRhck1lbnVKOQoVQ29tbWFuZC1MaW5lLURpc2FibGVkEAAqHmRpc2FibGUtbmV3LXByb2ZpbGUtbWFuYWdlbWVudEpJCihBY2NvdW50Q29uc2lzdGVuY3ktQ29tbWFuZC1MaW5lLURpc2FibGVkEAAqG2Rpc2FibGUtYWNjb3VudC1jb25zaXN0ZW5jeUo9CiBBdmF0YXJNZW51LUNvbW1hbmQtTGluZS1EaXNhYmxlZBAAKhdkaXNhYmxlLW5ldy1hdmF0YXItbWVudUowChRDb21tYW5kLUxpbmUtRW5hYmxlZBAAKhZuZXctcHJvZmlsZS1tYW5hZ2VtZW50SkcKJ0FjY291bnRDb25zaXN0ZW5jeS1Db21tYW5kLUxpbmUtRW5hYmxlZBAAKhplbmFibGUtYWNjb3VudC1jb25zaXN0ZW5jeUo7Ch9BdmF0YXJNZW51LUNvbW1hbmQtTGluZS1FbmFibGVkEAAqFmVuYWJsZS1uZXctYXZhdGFyLW1lbnVKEQoNTmV3QXZhdGFyTWVudRBkShEKDU9sZEF2YXRhck1lbnUQAFIfCMTUqp8FEgszOC4wLjIxMjAuMCABIAIoACgBKAI4AGABEv8DChROZXdQcm9maWxlTWFuYWdlbWVudBjE5Na7BTgBQg1PbGRBdmF0YXJNZW51SjkKFUNvbW1hbmQtTGluZS1EaXNhYmxlZBAAKh5kaXNhYmxlLW5ldy1wcm9maWxlLW1hbmFnZW1lbnRKSQooQWNjb3VudENvbnNpc3RlbmN5LUNvbW1hbmQtTGluZS1EaXNhYmxlZBAAKhtkaXNhYmxlLWFjY291bnQtY29uc2lzdGVuY3lKPQogQXZhdGFyTWVudS1Db21tYW5kLUxpbmUtRGlzYWJsZWQQACoXZGlzYWJsZS1uZXctYXZhdGFyLW1lbnVKMAoUQ29tbWFuZC1MaW5lLUVuYWJsZWQQACoWbmV3LXByb2ZpbGUtbWFuYWdlbWVudEpHCidBY2NvdW50Q29uc2lzdGVuY3ktQ29tbWFuZC1MaW5lLUVuYWJsZWQQACoaZW5hYmxlLWFjY291bnQtY29uc2lzdGVuY3lKOwofQXZhdGFyTWVudS1Db21tYW5kLUxpbmUtRW5hYmxlZBAAKhZlbmFibGUtbmV3LWF2YXRhci1tZW51ShEKDU5ld0F2YXRhck1lbnUQAUoLCgdDb250cm9sEAFKEQoNT2xkQXZhdGFyTWVudRBiUh4IxK3gogUSDDM5LjAuMjE3MS40MiADKAAoASgCOABgARJdCgxOZXdNZW51U3R5bGUYgNCfjQU4AUIHRGVmYXVsdEoLCgdEZWZhdWx0EABKDQoITmV3U3R5bGUQ5gdKDAoIT2xkU3R5bGUQAlISEgQyNi4qGgQyNy4qIAMoACgDEn4KDE5ld01lbnVTdHlsZRiA/qKSBTgBQgdEZWZhdWx0SgsKB0RlZmF1bHQQAEoMCghDb21wYWN0MRAASgwKCENvbXBhY3QyEGRKEgoOSGlnaGVyQ29udHJhc3QQAEoQCgxDb250cm9sR3JvdXAQAFIOEgQyOC4qIAEgACgAKAMShAEKDE5ld01lbnVTdHlsZRiA74KWBTgBQgdEZWZhdWx0SgsKB0RlZmF1bHQQAEoMCghDb21wYWN0MRAASgwKCENvbXBhY3QyEGRKEgoOSGlnaGVyQ29udHJhc3QQAEoQCgxDb250cm9sR3JvdXAQAFIUEgQyOC4qGgQzMC4qIAMgAigAKAMS/gMKFE5ld1Byb2ZpbGVNYW5hZ2VtZW50GMSCl7QFOAFCDU9sZEF2YXRhck1lbnVKOQoVQ29tbWFuZC1MaW5lLURpc2FibGVkEAAqHmRpc2FibGUtbmV3LXByb2ZpbGUtbWFuYWdlbWVudEpJCihBY2NvdW50Q29uc2lzdGVuY3ktQ29tbWFuZC1MaW5lLURpc2FibGVkEAAqG2Rpc2FibGUtYWNjb3VudC1jb25zaXN0ZW5jeUo9CiBBdmF0YXJNZW51LUNvbW1hbmQtTGluZS1EaXNhYmxlZBAAKhdkaXNhYmxlLW5ldy1hdmF0YXItbWVudUowChRDb21tYW5kLUxpbmUtRW5hYmxlZBAAKhZuZXctcHJvZmlsZS1tYW5hZ2VtZW50SkcKJ0FjY291bnRDb25zaXN0ZW5jeS1Db21tYW5kLUxpbmUtRW5hYmxlZBAAKhplbmFibGUtYWNjb3VudC1jb25zaXN0ZW5jeUo7Ch9BdmF0YXJNZW51LUNvbW1hbmQtTGluZS1FbmFibGVkEAAqFmVuYWJsZS1uZXctYXZhdGFyLW1lbnVKCwoHRW5hYmxlZBBkShEKDU5ld0F2YXRhck1lbnUQAEoRCg1PbGRBdmF0YXJNZW51EABSHQjEy8OgBRILMzkuMC4yMTUyLjAgACgAKAEoAjgAYAESVwoMTmV3VGFiQnV0dG9uGIC1jZYFOAFCB2RlZmF1bHRKCwoHZGVmYXVsdBBiSgsKB0NvbnRyb2wQAUoICgRQbHVzEAFSEhIMMjEuMC4xMTgwLjE1IAMoABKFBAoaT21uaWJveEJ1bmRsZWRFeHBlcmltZW50VjEYgO+xsAU4AUIFRW1wdHlKmwEKK0JldGFIVVBTY29yaW5nRXhwZXJpbWVudF9Db250cm9sX1Bvc3RwZXJpb2QQCjIaChJCb29rbWFya3NJbmRleFVSTHMSBHRydWUyFgoQSFFQQm9va21hcmtWYWx1ZRICMTAyEwoLWmVyb1N1Z2dlc3QSBHRydWUyIQoSWmVyb1N1Z2dlc3RWYXJpYW50EgtBZnRlclR5cGluZ0qWAQomQmV0YUhVUFNjb3JpbmdFeHBlcmltZW50X0ExX1Bvc3RwZXJpb2QQCjIaChJCb29rbWFya3NJbmRleFVSTHM